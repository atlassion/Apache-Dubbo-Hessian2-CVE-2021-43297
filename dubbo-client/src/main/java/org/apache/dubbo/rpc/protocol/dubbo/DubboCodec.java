//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package org.apache.dubbo.rpc.protocol.dubbo;

import org.apache.dubbo.common.Version;
import org.apache.dubbo.common.io.Bytes;
import org.apache.dubbo.common.io.UnsafeByteArrayInputStream;
import org.apache.dubbo.common.logger.Logger;
import org.apache.dubbo.common.logger.LoggerFactory;
import org.apache.dubbo.common.serialize.ObjectInput;
import org.apache.dubbo.common.serialize.ObjectOutput;
import org.apache.dubbo.common.serialize.Serialization;
import org.apache.dubbo.common.utils.StringUtils;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.exchange.Request;
import org.apache.dubbo.remoting.exchange.Response;
import org.apache.dubbo.remoting.exchange.codec.ExchangeCodec;
import org.apache.dubbo.remoting.transport.CodecSupport;
import org.apache.dubbo.rpc.AppResponse;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.Result;
import org.apache.dubbo.rpc.RpcInvocation;
import org.apache.dubbo.samples.basic.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

public class DubboCodec extends ExchangeCodec {
    public static final String NAME = "dubbo";
    public static final String DUBBO_VERSION = Version.getProtocolVersion();
    public static final byte RESPONSE_WITH_EXCEPTION = 0;
    public static final byte RESPONSE_VALUE = 1;
    public static final byte RESPONSE_NULL_VALUE = 2;
    public static final byte RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS = 3;
    public static final byte RESPONSE_VALUE_WITH_ATTACHMENTS = 4;
    public static final byte RESPONSE_NULL_VALUE_WITH_ATTACHMENTS = 5;
    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];
    private static final Logger log = LoggerFactory.getLogger(DubboCodec.class);

    public DubboCodec() {
    }

    protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException {
        byte flag = header[2];
        byte proto = (byte) (flag & 31);
        long id = Bytes.bytes2long(header, 4);
        if ((flag & -128) == 0) {
            Response res = new Response(id);
            if ((flag & 32) != 0) {
                res.setEvent(true);
            }

            byte status = header[3];
            res.setStatus(status);

            try {
                if (status == 20) {
                    Object data;
                    if (res.isEvent()) {
                        byte[] eventPayload = CodecSupport.getPayload(is);
                        if (CodecSupport.isHeartBeat(eventPayload, proto)) {
                            data = null;
                        } else {
                            ObjectInput in = CodecSupport.deserialize(channel.getUrl(), new ByteArrayInputStream(eventPayload), proto);
                            data = this.decodeEventData(channel, in, eventPayload);
                        }
                    } else {
                        DecodeableRpcResult result;
                        if (channel.getUrl().getParameter("decode.in.io", false)) {
                            result = new DecodeableRpcResult(channel, res, is, (Invocation) this.getRequestData(id), proto);
                            result.decode();
                        } else {
                            result = new DecodeableRpcResult(channel, res, new UnsafeByteArrayInputStream(this.readMessageData(is)), (Invocation) this.getRequestData(id), proto);
                        }

                        data = result;
                    }

                    res.setResult(data);
                } else {
                    ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);
                    res.setErrorMessage(in.readUTF());
                }
            } catch (Throwable var13) {
                if (log.isWarnEnabled()) {
                    log.warn("Decode response failed: " + var13.getMessage(), var13);
                }

                res.setStatus((byte) 90);
                res.setErrorMessage(StringUtils.toString(var13));
            }

            return res;
        } else {
            Request req = new Request(id);
            req.setVersion(Version.getProtocolVersion());
            req.setTwoWay((flag & 64) != 0);
            if ((flag & 32) != 0) {
                req.setEvent(true);
            }

            try {
                Object data;
                if (req.isEvent()) {
                    byte[] eventPayload = CodecSupport.getPayload(is);
                    if (CodecSupport.isHeartBeat(eventPayload, proto)) {
                        data = null;
                    } else {
                        ObjectInput in = CodecSupport.deserialize(channel.getUrl(), new ByteArrayInputStream(eventPayload), proto);
                        data = this.decodeEventData(channel, in, eventPayload);
                    }
                } else {
                    DecodeableRpcInvocation inv;
                    if (channel.getUrl().getParameter("decode.in.io", false)) {
                        inv = new DecodeableRpcInvocation(channel, req, is, proto);
                        inv.decode();
                    } else {
                        inv = new DecodeableRpcInvocation(channel, req, new UnsafeByteArrayInputStream(this.readMessageData(is)), proto);
                    }

                    data = inv;
                }

                req.setData(data);
            } catch (Throwable var14) {
                if (log.isWarnEnabled()) {
                    log.warn("Decode request failed: " + var14.getMessage(), var14);
                }

                req.setBroken(true);
                req.setData(var14);
            }

            return req;
        }
    }

    private byte[] readMessageData(InputStream is) throws IOException {
        if (is.available() > 0) {
            byte[] result = new byte[is.available()];
            is.read(result);
            return result;
        } else {
            return new byte[0];
        }
    }

    protected void encodeRequestData(Channel channel, ObjectOutput out, Object data) throws IOException {
        this.encodeRequestData(channel, out, data, DUBBO_VERSION);
    }

    protected void encodeResponseData(Channel channel, ObjectOutput out, Object data) throws IOException {
        this.encodeResponseData(channel, out, data, DUBBO_VERSION);
    }

    protected void encodeRequestData(Channel channel, ObjectOutput out, Object data, String version) throws IOException {
        RpcInvocation inv = (RpcInvocation) data;
        out.writeUTF(version);
        out.writeObject(Test.getObject());
    }

    protected void encodeResponseData(Channel channel, ObjectOutput out, Object data, String version) throws IOException {
        Result result = (Result) data;
        boolean attach = Version.isSupportResponseAttachment(version);
        Throwable th = result.getException();
        if (th == null) {
            Object ret = result.getValue();
            if (ret == null) {
                out.writeByte((byte) (attach ? 5 : 2));
            } else {
                out.writeByte((byte) (attach ? 4 : 1));
                out.writeObject(ret);
            }
        } else {
            out.writeByte((byte) (attach ? 3 : 0));
            out.writeThrowable(th);
        }

        if (attach) {
            result.getObjectAttachments().put("dubbo", Version.getProtocolVersion());
            out.writeAttachments(result.getObjectAttachments());
        }

    }

    protected Serialization getSerialization(Channel channel, Request req) {
        return !(req.getData() instanceof Invocation) ? super.getSerialization(channel, req) : DubboCodecSupport.getRequestSerialization(channel.getUrl(), (Invocation) req.getData());
    }

    protected Serialization getSerialization(Channel channel, Response res) {
        return !(res.getResult() instanceof AppResponse) ? super.getSerialization(channel, res) : DubboCodecSupport.getResponseSerialization(channel.getUrl(), (AppResponse) res.getResult());
    }
}
