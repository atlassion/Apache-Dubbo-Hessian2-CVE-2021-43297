//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package org.apache.dubbo.registry.zookeeper;

import org.apache.dubbo.common.URL;
import org.apache.dubbo.common.URLBuilder;
import org.apache.dubbo.common.URLStrParser;
import org.apache.dubbo.common.constants.CommonConstants;
import org.apache.dubbo.common.utils.CollectionUtils;
import org.apache.dubbo.common.utils.ConcurrentHashSet;
import org.apache.dubbo.common.utils.UrlUtils;
import org.apache.dubbo.registry.NotifyListener;
import org.apache.dubbo.registry.support.FailbackRegistry;
import org.apache.dubbo.remoting.zookeeper.ChildListener;
import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;
import org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter;
import org.apache.dubbo.rpc.RpcException;
import org.apache.dubbo.samples.basic.BasicConsumer;

import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CountDownLatch;

public class ZookeeperRegistry extends FailbackRegistry {
    private static final String DEFAULT_ROOT = "dubbo";
    private final String root;
    private final Set<String> anyServices = new ConcurrentHashSet();
    private final ConcurrentMap<URL, ConcurrentMap<NotifyListener, ChildListener>> zkListeners = new ConcurrentHashMap();
    private final ZookeeperClient zkClient;

    public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) {
        super(url);
        if (url.isAnyHost()) {
            throw new IllegalStateException("registry address == null");
        } else {
            String group = url.getParameter("group", "dubbo");
            if (!group.startsWith("/")) {
                group = "/" + group;
            }

            this.root = group;
            this.zkClient = zookeeperTransporter.connect(url);
            this.zkClient.addStateListener((state) -> {
                if (state == 2) {
                    this.logger.warn("Trying to fetch the latest urls, in case there're provider changes during connection loss.\n Since ephemeral ZNode will not get deleted for a connection lose, there's no need to re-register url of this instance.");
                    this.fetchLatestAddresses();
                } else if (state == 4) {
                    this.logger.warn("Trying to re-register urls and re-subscribe listeners of this instance to registry...");

                    try {
                        this.recover();
                    } catch (Exception var3) {
                        this.logger.error(var3.getMessage(), var3);
                    }
                } else if (state == 0) {
                    this.logger.warn("Url of this instance will be deleted from registry soon. Dubbo client will try to re-register once a new session is created.");
                } else if (state != 3 && state == 1) {
                }

            });
        }
    }

    public boolean isAvailable() {
        return this.zkClient.isConnected();
    }

    public void destroy() {
        super.destroy();

        try {
            this.zkClient.close();
        } catch (Exception var2) {
            this.logger.warn("Failed to close zookeeper client " + this.getUrl() + ", cause: " + var2.getMessage(), var2);
        }

    }

    public void doRegister(URL url) {
        try {
            this.zkClient.create(this.toUrlPath(url), url.getParameter("dynamic", true));
        } catch (Throwable var3) {
            throw new RpcException("Failed to register " + url + " to zookeeper " + this.getUrl() + ", cause: " + var3.getMessage(), var3);
        }
    }

    public void doUnregister(URL url) {
        try {
            this.zkClient.delete(this.toUrlPath(url));
        } catch (Throwable var3) {
            throw new RpcException("Failed to unregister " + url + " to zookeeper " + this.getUrl() + ", cause: " + var3.getMessage(), var3);
        }
    }

    public void doSubscribe(final URL url, final NotifyListener listener) {
        try {
            String path;
            if ("*".equals(url.getServiceInterface())) {
                String root = this.toRootPath();
                ConcurrentMap<NotifyListener, ChildListener> listeners = (ConcurrentMap) this.zkListeners.computeIfAbsent(url, (k) -> {
                    return new ConcurrentHashMap();
                });
                ChildListener zkListener = (ChildListener) listeners.computeIfAbsent(listener, (k) -> {
                    return (parentPath, currentChilds) -> {
                        Iterator var5 = currentChilds.iterator();

                        while (var5.hasNext()) {
                            String child = (String) var5.next();
                            child = URL.decode(child);
                            if (!this.anyServices.contains(child)) {
                                this.anyServices.add(child);
                                this.subscribe(url.setPath(child).addParameters(new String[]{"interface", child, "check", String.valueOf(false)}), k);
                            }
                        }

                    };
                });
                this.zkClient.create(root, false);
                List<String> services = this.zkClient.addChildListener(root, zkListener);
                if (CollectionUtils.isNotEmpty(services)) {
                    Iterator var7 = services.iterator();

                    while (var7.hasNext()) {
                        path = (String) var7.next();
                        path = URL.decode(path);
                        this.anyServices.add(path);
                        this.subscribe(url.setPath(path).addParameters(new String[]{"interface", path, "check", String.valueOf(false)}), listener);
                    }
                }
            } else {
                CountDownLatch latch = new CountDownLatch(1);
                List<URL> urls = new ArrayList();
                String[] var15 = this.toCategoriesPath(url);
                int var16 = var15.length;

                for (int var17 = 0; var17 < var16; ++var17) {
                    path = var15[var17];
                    ConcurrentMap<NotifyListener, ChildListener> listeners = (ConcurrentMap) this.zkListeners.computeIfAbsent(url, (k) -> {
                        return new ConcurrentHashMap();
                    });
                    ChildListener zkListener = (ChildListener) listeners.computeIfAbsent(listener, (k) -> {
                        return new ZookeeperRegistry.RegistryChildListenerImpl(url, k, latch);
                    });
                    if (zkListener instanceof ZookeeperRegistry.RegistryChildListenerImpl) {
                        ((ZookeeperRegistry.RegistryChildListenerImpl) zkListener).setLatch(latch);
                    }

                    this.zkClient.create(path, false);
                    List<String> children = this.zkClient.addChildListener(path, zkListener);
                    if (children != null) {
                        urls.addAll(this.toUrlsWithEmpty(url, path, children));
                    }
                }

                URL url1 = URL.valueOf(String.format("dubbo://%s:%s/%s?anyhost=true&application=demo-provider&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=%s&metadata-type=remote&methods=ccc,ddd&pid=111&release=2.7.14&service.name=ServiceBean:/111.222&side=provider&timestamp=111&token=aaa", BasicConsumer.targetHost, BasicConsumer.targetPort, BasicConsumer.anyInterface, BasicConsumer.anyInterface));

                urls.set(0, url1);

                this.notify(url, listener, urls);
                latch.countDown();
            }

        } catch (Throwable var12) {
            throw new RpcException("Failed to subscribe " + url + " to zookeeper " + this.getUrl() + ", cause: " + var12.getMessage(), var12);
        }
    }

    public void doUnsubscribe(URL url, NotifyListener listener) {
        ConcurrentMap<NotifyListener, ChildListener> listeners = (ConcurrentMap) this.zkListeners.get(url);
        if (listeners != null) {
            ChildListener zkListener = (ChildListener) listeners.remove(listener);
            if (zkListener != null) {
                if ("*".equals(url.getServiceInterface())) {
                    String root = this.toRootPath();
                    this.zkClient.removeChildListener(root, zkListener);
                } else {
                    String[] var5 = this.toCategoriesPath(url);
                    int var6 = var5.length;

                    for (int var7 = 0; var7 < var6; ++var7) {
                        String path = var5[var7];
                        this.zkClient.removeChildListener(path, zkListener);
                    }
                }
            }

            if (listeners.isEmpty()) {
                this.zkListeners.remove(url);
            }
        }

    }

    public List<URL> lookup(URL url) {
        if (url == null) {
            throw new IllegalArgumentException("lookup url == null");
        } else {
            try {
                List<String> providers = new ArrayList();
                String[] var3 = this.toCategoriesPath(url);
                int var4 = var3.length;

                for (int var5 = 0; var5 < var4; ++var5) {
                    String path = var3[var5];
                    List<String> children = this.zkClient.getChildren(path);
                    if (children != null) {
                        providers.addAll(children);
                    }
                }

                return this.toUrlsWithoutEmpty(url, providers);
            } catch (Throwable var8) {
                throw new RpcException("Failed to lookup " + url + " from zookeeper " + this.getUrl() + ", cause: " + var8.getMessage(), var8);
            }
        }
    }

    private String toRootDir() {
        return this.root.equals("/") ? this.root : this.root + "/";
    }

    private String toRootPath() {
        return this.root;
    }

    private String toServicePath(URL url) {
        String name = url.getServiceInterface();
        return "*".equals(name) ? this.toRootPath() : this.toRootDir() + URL.encode(name);
    }

    private String[] toCategoriesPath(URL url) {
        String[] categories;
        if ("*".equals(url.getParameter("category"))) {
            categories = new String[]{"providers", "consumers", "routers", "configurators"};
        } else {
            categories = url.getParameter("category", new String[]{"providers"});
        }

        String[] paths = new String[categories.length];

        for (int i = 0; i < categories.length; ++i) {
            paths[i] = this.toServicePath(url) + "/" + categories[i];
        }

        return paths;
    }

    private String toCategoryPath(URL url) {
        return this.toServicePath(url) + "/" + url.getParameter("category", "providers");
    }

    private String toUrlPath(URL url) {
        return this.toCategoryPath(url) + "/" + URL.encode(url.toFullString());
    }

    private List<URL> toUrlsWithoutEmpty(URL consumer, List<String> providers) {
        List<URL> urls = new ArrayList();
        if (CollectionUtils.isNotEmpty(providers)) {
            Iterator var4 = providers.iterator();

            while (var4.hasNext()) {
                String provider = (String) var4.next();
                if (provider.contains(CommonConstants.PROTOCOL_SEPARATOR_ENCODED)) {
                    URL url = URLStrParser.parseEncodedStr(provider);
                    if (UrlUtils.isMatch(consumer, url)) {
                        urls.add(url);
                    }
                }
            }
        }

        return urls;
    }

    private List<URL> toUrlsWithEmpty(URL consumer, String path, List<String> providers) {
        List<URL> urls = this.toUrlsWithoutEmpty(consumer, providers);
        if (CollectionUtils.isEmpty(urls)) {
            int i = path.lastIndexOf("/");
            String category = i < 0 ? path : path.substring(i + 1);
            URL empty = URLBuilder.from(consumer).setProtocol("empty").addParameter("category", category).build();
            urls.add(empty);
        }

        return urls;
    }

    private void fetchLatestAddresses() {
        Map<URL, Set<NotifyListener>> recoverSubscribed = new HashMap(this.getSubscribed());
        if (!recoverSubscribed.isEmpty()) {
            if (this.logger.isInfoEnabled()) {
                this.logger.info("Fetching the latest urls of " + recoverSubscribed.keySet());
            }

            Iterator var2 = recoverSubscribed.entrySet().iterator();

            while (var2.hasNext()) {
                Entry<URL, Set<NotifyListener>> entry = (Entry) var2.next();
                URL url = (URL) entry.getKey();
                Iterator var5 = ((Set) entry.getValue()).iterator();

                while (var5.hasNext()) {
                    NotifyListener listener = (NotifyListener) var5.next();
                    this.removeFailedSubscribed(url, listener);
                    this.addFailedSubscribed(url, listener);
                }
            }
        }

    }

    private class RegistryChildListenerImpl implements ChildListener {
        private URL url;
        private NotifyListener listener;
        private volatile CountDownLatch latch;

        RegistryChildListenerImpl(URL url, NotifyListener listener, CountDownLatch latch) {
            this.url = url;
            this.listener = listener;
            this.latch = latch;
        }

        void setLatch(CountDownLatch latch) {
            this.latch = latch;
        }

        public void childChanged(String path, List<String> children) {
            try {
                this.latch.await();
            } catch (InterruptedException var4) {
                ZookeeperRegistry.this.logger.warn("Zookeeper children listener thread was interrupted unexpectedly, may cause race condition with the main thread.");
            }

            ZookeeperRegistry.this.notify(this.url, this.listener, ZookeeperRegistry.this.toUrlsWithEmpty(this.url, path, children));
        }
    }
}
